
This is a **Recipe Finder** web application built using HTML, CSS, and JavaScript. It allows users to search for recipes, view their details, save favorite recipes, and change the application's theme.



---

## **HTML Structure**

The HTML sets up the basic layout of the web page.

** ****<!DOCTYPE html>***: Declares the document type.
** ****<html lang="en">***: The root element, specifying the language as English.
** ****<head>***: Contains metadata about the page:
    ** ****<meta charset="UTF-8" />***: Specifies the character encoding.
    ** ****<meta name="viewport" ... />***: Configures the viewport for responsive design.
    ** ****<meta name="description" ... />***: Provides a brief description of the page for search engines.
    ** ****<title>üçΩ Recipe Finder</title>***: Sets the title that appears in the browser tab.
    ** ****<link rel="stylesheet" ... />***: Links to Font Awesome for icons.
    ** **``*: Metadata for social media sharing.
    ** ****<style>***: Contains all the CSS rules for styling the application.
** ****<body>***: Contains the visible content of the web page:
    ** ****<nav>***: The top navigation bar with a logo, navigation links (Home, Favorites, Trending, Settings).
    ** ***Page Content Divs (<div id="home-page" ...>, etc.):
        * Each div represents a different "page" or section of the application (Home, Favorites, Trending, Settings).
        * They are initially hidden (display: none;) except for the "home-page" which is active by default.
    ** ***Home Page (home-page):
        ** **Search Section*: Contains an input field for recipe search and a search button.
        ** ****searchSuggestion***: A div to display search suggestions if no direct results are found.
        ** ****searchResultsHeader***: A header for search results, initially hidden.
        ** ****trendingSection***: Displays recommended/trending recipes on the home page.
        ** ****searchResults***: Where the search results will be displayed.
    ** ***Favorites Page (favorites-page): Displays liked recipes.
    ** ***Trending Page (trending-page): Dedicated page to show trending recipes.
    ** ***Settings Page (settings-page): Allows users to change the theme (Light, Dark, Colorful).
    ** ***Recipe Modal (recipeModal): A hidden pop-up (modal) that appears when a user clicks on a recipe to show its full details (ingredients, instructions, etc.).
    ** ****<footer>***: The footer section with social media links.
    ** ****<script>***: Contains all the JavaScript code to make the application interactive.

---

## **CSS Styling**

The CSS is extensive and provides a modern, clean, and responsive design for the Recipe Finder.

** ***Variables (:root, body.dark, body.colorful): Defines custom CSS properties (variables) for colors, shadows, etc. This allows for easy theme switching by simply changing the body class.
    * --bg: Background color.
    * --card-bg: Card background color.
    * --text: Text color.
    * --accent: Accent color (used for headings, links, etc.).
    * --primary: Primary button color.
    * --muted: Muted background color for footer.
    * --border: Border color.
    * --card-shadow, --hover-shadow: Box shadows for cards.
** ****General Styles (**, body): Resets margin/padding, sets default font, background, text color, and smooth transitions for theme changes.
** ***Navigation Bar (nav): Styles the sticky navigation bar, logo, and list items.
** ***Container (.container): Sets max-width and centers content.
** ***Headings (h1, h2): Styles headings.
** ***Search Section (.search-section): Styles the search input and button.
** ***Recipe Cards (.recipe-card):
    * Styles individual recipe display cards, including images, titles, regions, and view recipe buttons.
    ** ****like-btn***: Styles the heart icon button for favoriting recipes, including its positioning and active state.
** ***Modals (.modal, .modal-content): Styles the overlay and the content box for displaying full recipe details.
** **Modal Content Details*: Styles within the modal for images, tags, ingredients, instructions, and external links (YouTube, source).
** ***Settings Panel (.settings-panel): Styles the settings section where theme options are available.
** ***Theme Options (.theme-option): Styles the individual theme selection boxes, showing an active state.
** ***No Results / Error Messages (.no-results): Styles the message displayed when no recipes are found or there's an error.
** ***Footer (footer): Styles the bottom section of the page, including social links.
** ***Responsiveness (@media (max-width: 768px)): Adjusts layout for smaller screens (e.g., hiding text next to icons in the nav, stacking search input and button).

---

## **JavaScript Functionality**

The JavaScript handles all the dynamic behavior of the application.

### **Theme Management**

** ****currentTheme***: A global variable that stores the currently active theme, initialized from localStorage or defaults to 'light'.
** ****setTheme(theme)***:
    * Updates currentTheme.
    * Sets the className of the body element to the chosen theme (e.g., 'dark', 'colorful'), which triggers the CSS variables to change.
    * Saves the selected theme to localStorage so it persists across sessions.
    * Updates the active class on the theme options in the settings panel.
** ****setTheme(currentTheme)***: Immediately applies the saved theme when the page loads.

### **Page Navigation**

** ****showPage(pageId)***:
    * Takes a pageId (e.g., 'home', 'favorites') as an argument.
    * Removes the active class from all navigation list items and then adds it to the clicked navigation item to highlight it.
    * Hides all .page-content divs and then shows the div corresponding to the pageId.
    * Triggers specific content loading functions (loadFavorites(), loadTrendingRecipes()) when navigating to those pages.

### **Favorites Management**

** ****getFavorites()***: Retrieves the array of favorite recipe IDs from localStorage. If no favorites are stored, it returns an empty array.
** ****toggleFavorite(id, element)***:
    * Adds or removes a recipe id from the favorites array stored in localStorage.
    * Updates the active class on the heart icon (element) to reflect the favorite status.
    * If on the favorites page, it reloads the favorites to update the display.
** ****isFavorite(id)***: Checks if a given recipe id is present in the favorites array.

### ****Recipe Search (searchRecipes())****

* Gets the search term from the searchInput.
* Performs basic validation (alerts if the search term is empty).
* Clears previous search results, displays a "Searching..." message, and updates the header.
** **Fetches data from TheMealDB API*: https://www.themealdb.com/api/json/v1/1/search.php?s=${searchTerm}
    * If recipes are found (data.meals), it calls displayRecipes() to render them.
    ** If no recipes are found, it displays a "No results found" message and then attempts to fetch **search suggestions* from the Datamuse API (https://api.datamuse.com/sug?s=${searchTerm}).
        * If a suggestion is found, it displays a "Did you mean..." message with a button to search the suggestion.
    * Handles errors during API calls.
** ****searchWithSuggestion(suggestion)***: Populates the search input with a suggestion and triggers a new search.

### ****Displaying Recipes (displayRecipes(meals, container))****

* Takes an array of meals (recipe objects) and a container DOM element.
* Clears the container's existing HTML.
* Iterates through each meal:
    * Creates a recipe-card div.
    * Sets the image, title, region (if available).
    * Adds a "like" button, dynamically setting its active class based on whether the recipe is a favorite.
    * Adds a "View Recipe" button that calls viewRecipe().
    * Appends the created card to the specified container.

### ****Recipe Modal (viewRecipe(id))****

* Takes a recipe id.
* Displays the recipeModal and shows a "Loading..." message.
** **Fetches detailed recipe data from TheMealDB API*: https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}
    * If data is found, it extracts ingredients, instructions, and external links (YouTube, source).
    * Populates the modalContent with the recipe's image, name, category, area, ingredients list, instructions, and external links.
    * Handles cases where recipe details cannot be loaded.
** ****closeRecipeModal()***: Hides the recipe modal.
** ****getIngredients(meal)***: A helper function to extract ingredients and their measures from the meal object.

### ****Loading Favorites (loadFavorites())****

* Retrieves favorite recipe IDs using getFavorites().
* If no favorites, displays a "No favorites yet" message with a button to find recipes.
* If favorites exist, it makes multiple API calls (one for each favorite ID) using Promise.all to fetch their full details.
* Filters out any failed fetches and then calls displayRecipes() to show the favorited meals.
* Includes error handling for API calls.

### ****Loading Trending Recipes (loadTrendingRecipes())****

* Used to populate both the home page's "Recommended Recipes" section and the dedicated "Trending Recipes" page.
* Shows a "Loading..." message.
** **Fetches a random set of recipes from TheMealDB API*: It uses a random letter (e.g., 'a', 'b', 'c') to get a batch of recipes starting with that letter, then shuffles them and picks the first 8 for display. This simulates "trending" or popular recipes.
* Calls displayRecipes() to render the trending meals.
* Includes error handling.

### **Event Listeners**

** ****keydown for Escape key***: Closes the recipe modal when the Escape key is pressed.
** ****click on window***: Closes the recipe modal if the user clicks outside the modal content.
** ****DOMContentLoaded***: Ensures the initApp() function runs after the entire HTML document has been loaded and parsed.
** ****keyup on searchInput***: Triggers searchRecipes() when the Enter key is pressed in the search input.

---

## **API Used**

** **TheMealDB API*: https://www.themealdb.com/api/json/v1/1/
    * search.php?s={searchTerm}: To search for recipes by name.
    * lookup.php?i={id}: To get full details of a specific recipe by ID.
    * search.php?f={letter}: To get recipes starting with a specific letter (used for trending).
** **Datamuse API*: https://api.datamuse.com/sug?s={searchTerm}
    * To get search suggestions for misspelled or unfound recipe names.

